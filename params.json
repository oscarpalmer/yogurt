{"name":"Yogurt","tagline":"Yogurt is a template language for PHP.","body":"# Yogurt\r\n\r\n[![Build Status](https://travis-ci.org/oscarpalmer/yogurt.png?branch=master)](https://travis-ci.org/oscarpalmer/yogurt) [![Coverage Status](https://coveralls.io/repos/oscarpalmer/yogurt/badge.png)](https://coveralls.io/r/oscarpalmer/yogurt)\r\n\r\nYogurt is a template language for PHP inspired by [Riot's](http://riothq.com) [Hammer](http://hammerformac.com). Hammer's syntax was based on regular ol' HTML comment tags, so you won't have to install another syntax highlighter for your editor. Nice, huh?\r\n\r\n## Installation\r\n\r\nYogurt is available via Composer and works with PHP `>=5.3`.\r\n\r\n```json\r\n{\r\n  \"require\": {\r\n    \"oscarpalmer/yogurt\": \"1.*\"\r\n  }\r\n}\r\n```\r\n\r\n## Getting started\r\n\r\n```php\r\nuse oscarpalmer\\Yogurt\\Yogurt;\r\n\r\n$yogurt = new Yogurt(\"./directory/for/templates\", \"template-extension\");\r\n\r\n$flavour = $yogurt->flavour(\"my-template\");\r\n# Or $flavour = new Flavour($yogurt, \"my-template\");\r\n\r\n$flavour->data(array(\r\n  \"title\" => \"My Title\"\r\n));\r\n\r\n$flavour->tagline = \"My tagline.\";\r\n\r\necho $flavour->taste();\r\n# Or just echo $flavour;\r\n```\r\n\r\n## Syntax\r\n\r\nThe syntax is based on regular HTML comments and the control structures (`if` and `foreach`) are based on [Twig's](//github.com/fabpot/Twig) syntax, so it shouldn't be too difficult to learn.\r\n\r\n### Variables\r\n\r\n```html\r\n<p><!-- variable --></p>\r\n<p><!-- chaining.variables.works.too --></p>\r\n```\r\n\r\n`variable` is a direct child of the data array (`$flavour->data();`), and the `chaining.variables.works.too` is a nested child of multiple arrays inside the data array.\r\n\r\nVariables _should_ be of the `scalar` type, i.e. `boolean`, `float`, `integer`, or `string`. If not, PHP will scream.\r\n\r\n### Including other files\r\n\r\n```html\r\n<!-- include file.html -->\r\n<!-- include file -->\r\n```\r\n\r\nYogurt will then attempt to find the file in the directory supplied to Yogurt as shown in the [\"Getting started\" example](#getting-started); the second one will automatically append the supplied file extension.\r\n\r\n### Looping\r\n\r\n```html\r\n<!-- for item in items -->\r\n<p><!-- item --></p>\r\n<!-- endfor -->\r\n```\r\n\r\n`items` _should_ be an array, but `item` can be whatever; just remember to chain names to access the item's children if it isn't `scalar`, like this: `item.title`.\r\n\r\n### Ifs and else-ifs\r\n\r\n```html\r\n<!-- if title -->\r\n<p>Title exists.</p>\r\n<!-- endif -->\r\n\r\n<!-- if page is \"some-page\" -->\r\n<p>Page is \"some-page\".</p>\r\n<!-- elseif number === 1234 -->\r\n<p>Number is \"1234\".</p>\r\n<!-- else -->\r\n<p>This is pretty cool.</p>\r\n<!-- endif -->\r\n```\r\n\r\nSupported comparison operators are `===`, `==`, `!==`, `!=`, `>=`, `<=`, `<>`, `>`, `<`, `is`, and `isnt`. `is` and `isnt` will be turned into `==` and `!=` respectively.\r\n\r\nValues can be `scalar`, `null`, or variables. `boolean`, `float`, `integer`, and `null` values can be wrapped in quotation marks, but don't necessarily need them.\r\n\r\nStrings however, do need quotation marks; if they're not wrapped in quotation marks, they're assumed to be variables.\r\n\r\n## Todo\r\n\r\n- Caching.\r\n- Including variables; i.e. a filename stored as a variable.\r\n- Other languages?\r\n\r\n## License\r\n\r\nMIT Licensed; see [the LICENSE file](LICENSE) for more info.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}